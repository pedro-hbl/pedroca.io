[{"title":"Understanding and Mitigating AWS Lambda Throttling in High-Concurrency Workloads","description":null,"tags":["aws","lambda","throttling"],"slug":"lambda-throttling","html":"Introduction When dealing with high-concurrency workloads, scaling AWS Lambda effectively while avoiding throttling can become a challenge. This post explores a real-world scenario where an application(just like a worker), written in Kotlin, processed over 1,000,000 records in a blob located in S3 using a custom asynchronous iteration method. Each record triggered an asynchronous Lambda invocation that interacted with DynamoDB. However, the setup led to 429 Too Many Requests errors occurring consistently during peak loads exceeding 10,000 TPS, indicating throttling issues with AWS Lambda. In this post I will: Outline the problem faced while processing high-concurrency workloads. Explain AWS Lambda throttling mechanisms, based on the AWS Compute Blog article by James Beswick. Discuss solutions to mitigate throttling. TBD Maybe in the future I'll Provide a real-world proof of concept (POC) to evaluate each mitigation technique. Use Case To better illustrate the challenges and solutions, consider the following use case: Dataset: The workload involves processing a large file with 1 million records stored in an S3 bucket. Data Characteristics: Each record contains 8 columns of strings, primarily UUIDs (36 bytes each). This results in approximately 288 bytes per record. Worker Configuration: The application is deployed on a SINGLE node with the following specifications: vCPUs: 4 RAM: 8 GB Resource Calculations Memory Requirements: Each record occupies 288 bytes. For 100 concurrent coroutines: ( 288 * 100 = 28,800 bytes approx 28.8KB ) Adding a 20 KB overhead per coroutine for runtime management: ( 100 * 20KB = 2,000KB approx 2MB ) Total memory consumption: ( 28.8KB + 2,000KB = 2.028MB ) CPU Considerations: Each vCPU can handle approximately 100-150 threads (or coroutines) effectively, depending on the workload. For this use case, 4 vCPUs are sufficient to manage 100 concurrent coroutines with minimal contention. This setup ensures that the system remains stable while processing a high volume of records efficiently. The Challenge Problem Context A workload involving processing a large file of over 1,000,000 records can utilize concurrency in Kotlin to invoke AWS Lambda for each record. The Lambda function in this case performed a putItem operation on DynamoDB. Here’s an example of the Kotlin code for mapAsync: suspend fun &lt;T, R&gt; Iterable&lt;T&gt;.mapAsync( transformation: suspend (T) -&gt; R ): List&lt;R&gt; = coroutineScope { this@mapAsync .map { async { transformation(it) } } .awaitAll() } suspend fun &lt;T, R&gt; Iterable&lt;T&gt;.mapAsync( concurrency: Int, transformation: suspend (T) -&gt; R ): List&lt;R&gt; = coroutineScope { val semaphore = Semaphore(concurrency) this@mapAsync .map { async { semaphore.withPermit { transformation(it) } } } .awaitAll() } This method processes records significantly faster than a standard for loop, but it can flood the system with Lambda invocations, triggering throttling. The 429 Too Many Requests errors can be attributed to: Concurrency Limits: AWS imposes a limit on the number of concurrent executions per account. TPS (Transactions Per Second) Limits: High TPS can overwhelm the Invoke Data Plane. Burst Limits: Limits the rate at which concurrency can scale, governed by the token bucket algorithm. Observed Errors 429 Too Many Requests: Errors indicate that the Lambda invocations exceeded allowed concurrency or burst limits. DynamoDB “Provisioned Throughput Exceeded” errors occurred during spikes in DynamoDB writes. But this one can be discussed in another moment, for now I won't consider mitigation strategies specifically for it. AWS Lambda Throttling Mechanisms AWS enforces three key throttle limits to protect its infrastructure and ensure fair resource distribution: 1. Concurrency Limits Concurrency limits determine the number of in-flight Lambda executions allowed at a time. For example, with a concurrency limit of 1,000, up to 1,000 Lambda functions can execute simultaneously across all Lambdas in the account and region. 2. TPS Limits TPS is derived from concurrency and function duration. For instance: Function duration: 100 ms (equivalent to 100ms =100 × 10-3 = 0.1s) Concurrency: 1,000 TPS = Concurrency / Function Duration = 10,000 TPS If the function duration drops below 100 ms, TPS is capped at 10x the concurrency. 3. Burst Limits The burst limit ensures gradual scaling of concurrency, avoiding large spikes in cold starts. AWS uses the token bucket algorithm to enforce this: Each invocation consumes a token. Tokens refill at a fixed rate (e.g., 500 tokens per minute). The bucket has a maximum capacity (e.g., 1,000 tokens). For more details, refer to the AWS Lambda Burst Limits. Mitigation Strategies That being said, several approaches can be employed to mitigate the throttling scenarios observed in this case. These techniques aim to address the specific constraints and challenges imposed by the problem: 1. Limit Concurrency Using Semaphore Concurrency in Kotlin can be limited using the mapAsync function with a specified concurrency level: val results = records.mapAsync(concurrency = 100) { record -&gt; invokeLambda(record) } This implementation leverages coroutines in Kotlin to handle asynchronous operations efficiently. I don't want to deep dive here in how coroutines work, but think of it as a tool that allow lightweight threads to run without blocking, making it possible to manage multiple tasks concurrently without overwhelming system resources. In the use case described, where the workload involves processing millions of records within 100 concurrent coroutines, the concurrency level of 100 was chosen as a reasonable limit. This decision balances the capacity of the node, configured with 4 vCPUs and 8 GB of RAM, against the resource requirements of each coroutine. For example, each coroutine processes records with a memory overhead of approximately 28.8 KB per record, plus 20 KB for runtime management. This setup ensures stability while maximizing throughput within the system’s constraints. By introducing a Semaphore, the number of concurrent tasks can be restricted to this specified level. This prevents overloading the Lambda concurrency limits and reduces the risk of 429 Too Many Requests errors, ensuring that the system remains stable and performs reliably. Estimated Time to Process Given a concurrency level of 100 and a function duration of 100 ms per record: Processing time per record: 100 ms Total records: 1,000,000 Total time = (1,000,000 / 100) * 100 ms = 1,000,000 ms = 1,000 seconds = 16.67 minutes. Key Advantages: Simple Implementation: Adding a Semaphore to the mapAsync function involves minimal changes to the codebase. Effective Throttling Control: The implementation ensures that the number of concurrent Lambda invocations does not exceed the predefined limit, maintaining system stability. Trade-offs: Increased Processing Time: While throttling prevents errors, it may result in longer overall processing times due to the limitation on simultaneous executions. No Guarantee: While this approach prevents the majority of 429 Too Many Requests errors, it does not guarantee that such errors will not occur again. This is because, even when the number of concurrent Lambdas in execution is controlled, the system might still exceed burst limits, which are governed by the token bucket algorithm. Difficult to Manage in Distributed Systems: This approach is more practical in scenarios with a single node running the application. In distributed systems with multiple nodes running the same application (e.g., 10 instances), it becomes challenging to coordinate a distributed TPS control mechanism. Each node would need to communicate and share state to ensure the total TPS remains within AWS limits, which significantly increases complexity. 2. Retry with Exponential Backoff Retries with exponential backoff handle throttled requests effectively by spreading out retry attempts over time. This reduces the chance of overwhelming the system further when transient issues or throttling limits occur. The exponential backoff algorithm increases the delay between retries after each failed attempt, making it particularly useful in high-concurrency systems and also in services/calls that might fail at times. How It Works: The implementation retries an AWS Lambda invocation up to a specified number of attempts, introducing exponentially increasing delays between retries. For example: suspend fun invokeWithRetry(record: Record, retries: Int = 3) { var attempts = 0 while (attempts &lt; retries) { try { invokeLambda(record) break } catch (e: Exception) { if (++attempts == retries) throw e delay((2.0.pow(attempts) * 100).toLong()) } } } Estimated Time to Process Assuming: Retry attempts: 3 per record Backoff delays: 100 ms, 200 ms, 400 ms (cumulative 700 ms per failed record) Concurrency: 100 retries concurrently Total time for retries (assuming approx 10% of records require retries): Retry time = 100,000 * 700 ms / 100 = 70,000 ms = 70 seconds Total processing time (including retries): Total time = 16.67 minutes + 1.17 minutes = 17.84 minutes This assumes optimal conditions where retries are evenly distributed and do not introduce contention. Pros: Handles transient errors gracefully: Retries ensure that temporary issues, such as short-lived throttling or network disruptions, do not result in failed processing. Distributed systems friendly: Can be independently implemented in each node, avoiding the need for centralized control mechanisms. Reduces system load during failures: The increasing delay between retries prevents the system from being overwhelmed. Cons: Adds latency: The exponential backoff mechanism inherently increases the time taken to complete processing, can take even BIGGER times when considering worst case scenarios(potentially 10x more the total time discussed). Increases code complexity and testability: Requires additional logic to manage retries and delays and testing those scenarios when only part of the requests fail. 3. Use SQS for Decoupling Amazon Simple Queue Service (SQS) can act as a buffer between producers (e.g., the application processing records) and consumers (e.g., AWS Lambda), enabling controlled, asynchronous processing of requests. This approach decouples the producer and consumer, ensuring the workload is processed at a rate the system can handle. How It Works: The application writes each record to an SQS queue instead of invoking AWS Lambda directly. AWS Lambda is configured to process messages from the queue at a controlled rate, dictated by the batch size and concurrency settings. This ensures that the rate of Lambda invocations remains within the account's concurrency and TPS limits. Use Case: This approach is ideal for high-throughput systems with unpredictable traffic patterns or distributed applications with multiple producer nodes. For example, processing 1 million records stored in S3 can involve multiple workers writing to the same SQS queue, while the queue ensures smooth, consistent processing by AWS Lambda. Additional Pattern: AWS Serverless Land Example This approach aligns with a pattern presented on AWS Serverless Land: Create a Lambda function that batch writes to DynamoDB from SQS. This pattern deploys an SQS queue, a Lambda Function, and a DynamoDB table, allowing batch writes from SQS messages to DynamoDB. It demonstrates how to leverage a batch processing mechanism to handle high-throughput scenarios effectively. The provided SAM template uses Java 11, SQS, Lambda, and DynamoDB to create a cost-effective, serverless architecture: AWSTemplateFormatVersion: 2010-09-09 Transform: AWS::Serverless-2016-10-31 Description: sqs-lambda-dynamodb Globals: Function: Runtime: java11 MemorySize: 512 Timeout: 25 Resources: OrderConsumer: Type: AWS::Serverless::Function Properties: FunctionName: OrderConsumer Handler: com.example.OrderConsumer::handleRequest CodeUri: target/sourceCode.zip Environment: Variables: QUEUE_URL: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/OrdersQueue' REGION: !Sub '${AWS::Region}' TABLE_NAME: !Ref OrdersTable Policies: - AWSLambdaSQSQueueExecutionRole - AmazonDynamoDBFullAccess OrdersQueue: Type: AWS::SQS::Queue Properties: QueueName: OrdersQueue OrdersTable: Type: 'AWS::DynamoDB::Table' Properties: TableName: OrdersTable AttributeDefinitions: - AttributeName: orderId AttributeType: S KeySchema: - AttributeName: orderId KeyType: HASH ProvisionedThroughput: ReadCapacityUnits: 5 WriteCapacityUnits: 5 This template highlights the use of batch processing to efficiently write data to DynamoDB while maintaining scalability and cost-efficiency. Estimated Time to Process Assuming: SQS processes messages in batches of 10. Lambda concurrency: 100 (processing 1,000 messages at a time). Processing time per batch: 100 ms Total time: Total time = (1,000,000 / 1,000) * 100 ms = 100,000 ms = 100 seconds = 1.67 minutes Pros: Decouples producers and consumers: The producer can continue adding messages to the queue regardless of the Lambda processing speed. Prevents throttling: SQS regulates the rate at which messages are delivered to Lambda, avoiding sudden spikes that could exceed AWS limits. Distributed systems friendly: Works seamlessly in multi-node systems, as all nodes write to the same queue without requiring coordination. Cons: Adds architectural complexity: Introducing SQS requires additional components and configuration. Adds code complexity: Introduce code complexity to the insertion lambda, so its responsible for managing sqs batch write operations, reading on SQS source and also being able to operate by asynchronous invocation for legacy systems. Introduces latency: Messages may wait in the queue before being processed, depending on the Lambda polling rate and queue depth. For example, a queue depth of 10,000 messages and a polling rate of 1,000 messages per second would result in a 10-second processing delay for each 10,0000 messages. Architectural Insights For small workloads, async invocation can provide faster results, as it avoids the latency of queuing and batch processing. However, as the number of requests increases, direct invocation becomes inefficient and computationally expensive due to the high TPS demand and risk of breaching AWS limits. In contrast, decoupled architectures using SQS and batch processing scale more efficiently, ensuring stability and cost-effectiveness under heavy loads. Conclusion AWS Lambda throttling issues, particularly for high-concurrency workloads, can be effectively managed using a combination of strategies such as concurrency control, retry mechanisms, and decoupling with SQS. Each of these approaches has its strengths and trade-offs: Limit Concurrency Using Semaphore: A straightforward solution for single-node setups, providing reliable throttling control at the cost of slightly increased processing time. However, it requires additional considerations for distributed systems. Retry with Exponential Backoff: A robust technique for handling transient failures, distributing load over time and avoiding unnecessary retries. Yet, it can add significant latency in worst-case scenarios and increase implementation complexity. Use SQS for Decoupling: The most stable and distributed-friendly approach, enabling smooth load handling and scalable processing. While it introduces latency and complexity, its benefits make it the go-to solution for large-scale systems. Next Steps: Implementing a POC While this post has focused on explaining the challenges, strategies, and theoretical calculations for mitigation, an actual Proof of Concept (POC) is essential to validate these solutions in practice. A future post might explore how to design and execute a POC to measure the performance, reliability, and cost implications of these approaches in a real-world scenario. For more details on Lambda throttling, refer to the AWS Lambda Developer Guide and the AWS Compute Blog."},{"title":"Choosing a Garbage Collector for Your Java/Kotlin Application: Things I Wish I Knew Back Then","description":null,"tags":["java","garbage-collector","kotlin","jvm"],"slug":"garbage-collector","html":"Introduction When I first started building Java and Kotlin applications, I didn’t really pay much attention to garbage collection. It was this magical process that &quot;just worked.&quot; But as I moved into more complex systems—batch processing, high-throughput APIs, and distributed architectures—I realized that choosing the right garbage collector could make or break my application’s performance, and also prevent some later production incidents. Some of my early APIs even experienced breakdowns due to memory leaks, leading to unresponsive systems under heavy load. These episodes taught me the critical importance of understanding how GC works and how to configure it for specific workloads. Failing to consider GC for high-throughput APIs, for example, can lead to severe latency spikes, memory fragmentation, or outright crashes. This article is a guide for those who, like me, wish they had a clearer understanding of JVM garbage collectors earlier. I will try to cover: How garbage collection works in the JVM. The different types of GCs available. Real-world use cases and configs for each GC. Choosing the right garbage collector (references for informed decision-making). Conclusion &amp; Exercises ;-). Let’s dive in and make garbage collection work for you, not against you. How Garbage Collection Works in the JVM Garbage collection in the JVM is all about managing heap memory(imagine it's the playground where all your objects live). When objects are no longer referenced, they become eligible for garbage collection, freeing up memory for new allocations. But the process isn’t always seamless—GC pauses and overhead can significantly impact performance. Key Concepts Heap Memory Eden Space (in the Young Generation): Purpose: This is where new objects are first allocated. Garbage Collection Behavior: Objects in Eden are short-lived and quickly collected during a minor GC cycle if they are no longer in use. Example: Suppose you’re creating multiple instances of a Minion class. And those minions are from League of Legends or Despicable Me—your choice: for (int i = 0; i &lt; 1000; i++) { Minion minion = new Minion(&quot;Minion &quot; + i); } All these minions will initially be created in the Eden space. If they are not referenced anymore after their creation, they will be collected during the next minor GC. Survivor Spaces (in the Young Generation): Purpose: Objects that survive one or more minor GC cycles in Eden are moved to Survivor spaces. Garbage Collection Behavior: Survivor spaces act as a staging area before objects are promoted to the Old Generation. Example: In a game application, temporary data like dead minions or player movement logs might survive for a short time in Survivor spaces before being discarded or promoted if reused frequently. Old Generation: Purpose: Objects that have a long lifespan or survive multiple minor GC cycles are moved to the Old Generation. Garbage Collection Behavior: Garbage collection here is less frequent but more time-consuming. Example: Imagine you’re building a game where each Player represents a connected user on the match. These objects are long-lived compared to temporary data like minions or projectiles and may look like this: public class Player { private final String name; private final Inventory inventory; public Player(String name) { this.name = name; this.inventory = new Inventory(); } } A Player object, which holds data such as the player’s inventory and stats, will likely reside in the Old Generation as it persists for the entire application session. Metaspace: Purpose: Think of Metaspace as the library(outside the heap) of your application—it keeps the blueprints (class metadata) for all the objects your application creates. Garbage Collection Behavior: Metaspace grows dynamically as new class loaders are introduced and is cleaned up when those class loaders are no longer needed. This ensures that unused blueprints don’t mess up your libraries. Example: Imagine you’re running a game that supports mods, and players can load new heroes dynamically. Each mod represents a new class dynamically loaded at runtime: Class&lt;?&gt; heroClass = Class.forName(&quot;com.game.dynamic.Hero&quot;); Object hero = heroClass.getDeclaredConstructor().newInstance(); The blueprint for the Hero class will be stored in Metaspace. When the mod is unloaded or the player exits the game, the class loader is no longer needed, and the JVM will clean up the associated Metaspace memory. This ensures that your application remains efficient, even with dynamic features. Garbage Collector Phases Mark: Purpose: Identify live objects by traversing references starting from the root set (e.g., static fields, local variables). Practical Example: Consider this code: Player player = new Player(&quot;Hero&quot;); player.hitMinion(); The player object is reachable because it’s referenced in the method. During the Mark phase, the GC identifies player and its dependencies as live objects. Sweep: Purpose: Reclaim memory occupied by objects not marked as live. Practical Example: If the player reference is set to null: player = null; The next GC cycle’s Sweep phase will reclaim the memory occupied by the player object and its associated data. Compact: Purpose: Reduce fragmentation by moving objects closer together in memory. Practical Example: After reclaiming memory, gaps may exist in the heap. Compacting ensures efficient allocation for future objects: // Before compaction: [Minion 1][ ][Minion 3][ ] // After compaction: [Minion 1][Minion 3][ ] This step is particularly important in systems with frequent allocations and deallocations(Related to CPU efficiency). For a deep understanding, the JVM GC documentation provides wider insights (source). Types of JVM Garbage Collectors 1. Serial Garbage Collector (Serial GC) Overview: The Serial GC is single-threaded and optimized for simplicity. It processes the Young and Old Generations one at a time, pausing application threads during GC. When to Use: VERY SMALL applications with SINGLE-THREAD workloads. Low-memory environments (e.g., embedded systems). Limitations: Not suitable for high-concurrency, high-throughput systems. Maximum throughput is low due to its single-threaded nature. Example: Consider a system managing API calls for IoT devices that periodically send sensor data (e.g., room temperature). Each device sends minimal data in a predictable pattern, and the system handles only one request per thread. The Serial GC ensures predictable, low-overhead memory management, making it an ideal choice for such an environment. Docker Example: FROM openjdk:17-jdk-slim CMD java -XX:+UseSerialGC -Xmx512m -jar app.jar 2. Parallel Garbage Collector (Parallel GC) Overview: Parallel GC, also known as the Throughput Collector, uses multiple threads to speed up garbage collection. It aims to maximize application throughput by minimizing the total GC time. You can check some crazy a** graphs and get better explanation at the official documentation here. When to Use: Batch processing systems. Applications prioritizing throughput over low latency. Example: Imagine a financial service API that consolidates transactions into daily reports. Since the workload prioritizes throughput over latency, Parallel GC is ideal for processing large transaction sets efficiently. Docker Example: FROM openjdk:17-jdk-slim CMD java -XX:+UseParallelGC -Xmx2g -jar app.jar 3. G1 Garbage Collector (G1GC) Overview: G1GC divides the heap into regions and collects garbage incrementally, making it a good balance between throughput and low latency. When to Use: General-purpose applications. Systems requiring predictable pause times. Example: Any SaaS platform serving user requests in under 200ms with moderate traffic spikes. Docker Example: FROM openjdk:17-jdk-slim CMD java -XX:+UseG1GC -Xmx4g -XX:MaxGCPauseMillis=200 -jar app.jar Important considerations about G1GC: You might be wondering: &quot;If G1GC supports both good throughput and low latency, why not use it for every application? Sounds like a no-brainer...&quot; But well, not quite. While G1GC is a fantastic general-purpose garbage collector, it’s not the universal solution for all workloads. Think of it as the &quot;jack of all trades&quot; of GCs—good at many things, but not necessarily the best at any one thing. Poof! Now that you’re out of the cave, let’s analyze: Throughput-Focused Applications: If your application doesn’t care about pause times—for example, batch processing systems or data aggregation pipelines—why would you burden it with G1GC’s incremental collection overhead? Parallel GC is better suited here, offering raw performance without worrying about predictable pauses. Ultra-Low Latency Needs: If you’re building a real-time trading system or managing huge heaps (think terabytes), G1GC might struggle to meet your strict latency requirements. Collectors like ZGC or Shenandoah GC are designed specifically for these use cases, offering sub-10ms pause times. In short, G1GC is like that versatile tool in your toolbox—it works well for a variety of tasks, especially if you’re building the classic CRUD API (yes pretty much all of your messy simple Spring CRUDs). But if you’re running specialized workloads, you’ll want to pick a collector that’s optimized to your needs. 4. Z Garbage Collector (ZGC) Overview: ZGC is designed for ultra-low-latency applications with large heaps (up to terabytes). Its pause times are typically under 10 milliseconds. When to Use: Real-time systems. Applications with very large heaps. When to DO NOT use: Imagine you have a batch processing system using ZGC. There is very high chance of facing inceased CPU utilization($$$) without any latency benefit. For example, a data ingestion pipeline optimized for high throughput but insensitive to pause times would waste resources managing unnecessary low-latency GC cycles. Example: A trading system processing market data streams in real time. Docker Example: FROM openjdk:17-jdk-slim CMD java -XX:+UseZGC -Xmx16g -jar app.jar 5. Shenandoah Garbage Collector Overview: Shenandoah GC minimizes pause times by performing concurrent compaction. It’s ideal for latency-sensitive applications. When to Use: Payment gateways with strict SLA requirements for latency. APIs with spiky traffic patterns, such as social media feeds or live voting systems. Applications where reducing GC pause time is critical to user experience, such as gaming servers or interactive web applications. When to DO NOT use: Using Shenandoah GC for batch processing systems or workloads optimized for high throughput over low latency (e.g., nightly data aggregation) may lead to inefficient CPU utilization. The additional overhead of concurrent compaction provides no benefits when predictable pauses are acceptable, reducing overall throughput compared to Parallel GC. For exampe, a financial reconciliation batch process configured with Shenandoah might experience reduced throughput due to unnecessary focus on low pause times, delaying report generation. Example: A payment processing API handling high transaction volumes cannot afford GC-induced latency spikes during peak hours. Shenandoah’s low-pause nature ensures that transaction processing continues smoothly even under heavy load. Another example is a real-time multiplayer gaming server, where latency spikes could lead to a poor player experience. Shenandoah ensures consistent frame updates and server responsiveness. Docker Example: FROM openjdk:17-jdk-slim CMD java -XX:+UseShenandoahGC -Xmx8g -XX:+UnlockExperimentalVMOptions -jar app.jar Choosing the Right Garbage Collector Here you can find a cheatsheet. But remember... you should always evaluate your own workload before choosing it's garbage collector. Garbage Collector Best For JVM Version Support Serial GC Small, single-threaded apps All versions Parallel GC High-throughput batch systems All versions G1GC General-purpose apps Java 9+ ZGC Real-time, large heap apps Java 11+ Shenandoah GC Low-latency apps Java 11+ Conclusion Choosing the right garbage collector for your application requires some knowledge over the tools I discussed in this post. But once you learn about it, you may have the power of taking decisions, and this is extremely valuable in Software Engineering field, also, by selecting the right GC you can significantly improve performance, stability and save some costs for your future applications based on JVM. Don’t let GC be a black box—embrace it, tune it, and let it work for you. Training: Real-World Scenarios and Solutions Scenario 1: Payment Gateway Latency You are building a payment gateway API that must process transactions in real-time with strict SLA requirements. The workload is spiky, with heavy traffic during sales events or specific times of the day. Which garbage collector would you choose to ensure low latency? Scenario 2: Batch Data Processing System Your application processes daily financial reconciliation batches, which involve large amounts of data. Latency is not a concern, but throughput must be maximized to complete processing as fast as possible. Which garbage collector fits this use case? Scenario 3: Real-Time Multiplayer Game You are designing a server for a real-time multiplayer game. The server must manage thousands of players, each generating events continuously. Latency spikes during garbage collection are unacceptable as they could lead to lag and a poor user experience. What GC configuration would you use? Solutions Solution 1: Payment Gateway Latency Use Shenandoah GC to ensure low latency and consistent response times. Its concurrent compaction minimizes pause times, making it ideal for latency-sensitive workloads. Solution 2: Batch Data Processing System Use Parallel GC to maximize throughput. Since latency isn’t a concern, the Parallel GC’s focus on high efficiency during garbage collection fits this workload. Solution 3: Real-Time Multiplayer Game Use ZGC to achieve ultra-low latency and scale with large heaps. It ensures that garbage collection does not interfere with real-time gameplay. References: Java Garbage Collection Basics - Oracle"},{"title":"About me","description":null,"tags":[],"slug":"about","html":"I frequently discuss topics related to Cloud Architectures(mostly AWS), Distributed Systems, Highly Available Web Services, Banking Technology and Performance Optimization. Open to connecting globally for collaboration and knowledge sharing. Email me at pedro.hnblopes@gmail.com Follow me on linkedin https://www.linkedin.com/in/pedro-lopes-4563a7196/"}]